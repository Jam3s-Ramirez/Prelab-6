
Prelab 6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  0000026e  00000302  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000026e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  0080010e  0080010e  00000310  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000310  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000340  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  00000380  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008ef  00000000  00000000  000003d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000780  00000000  00000000  00000cc7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000046c  00000000  00000000  00001447  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000c8  00000000  00000000  000018b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000046b  00000000  00000000  0000197c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000205  00000000  00000000  00001de7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00001fec  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 16 01 	jmp	0x22c	; 0x22c <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e6       	ldi	r30, 0x6E	; 110
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 30       	cpi	r26, 0x0E	; 14
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ae e0       	ldi	r26, 0x0E	; 14
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a2 31       	cpi	r26, 0x12	; 18
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 cc 00 	call	0x198	; 0x198 <main>
  9e:	0c 94 35 01 	jmp	0x26a	; 0x26a <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <initUART9600>:
	
	//HABILITA PREESCALER A 128 - 125kHz
	ADCSRA |= (1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
	
	//HABILITA EL ADC
	ADCSRA |= (1<<ADEN);
  a6:	f8 94       	cli
  a8:	8f ef       	ldi	r24, 0xFF	; 255
  aa:	84 b9       	out	0x04, r24	; 4
  ac:	15 b8       	out	0x05, r1	; 5
  ae:	8a b1       	in	r24, 0x0a	; 10
  b0:	8e 7f       	andi	r24, 0xFE	; 254
  b2:	8a b9       	out	0x0a, r24	; 10
  b4:	8a b1       	in	r24, 0x0a	; 10
  b6:	82 60       	ori	r24, 0x02	; 2
  b8:	8a b9       	out	0x0a, r24	; 10
  ba:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  be:	e1 ec       	ldi	r30, 0xC1	; 193
  c0:	f0 e0       	ldi	r31, 0x00	; 0
  c2:	10 82       	st	Z, r1
  c4:	80 81       	ld	r24, Z
  c6:	88 69       	ori	r24, 0x98	; 152
  c8:	80 83       	st	Z, r24
  ca:	e2 ec       	ldi	r30, 0xC2	; 194
  cc:	f0 e0       	ldi	r31, 0x00	; 0
  ce:	10 82       	st	Z, r1
  d0:	80 81       	ld	r24, Z
  d2:	86 60       	ori	r24, 0x06	; 6
  d4:	80 83       	st	Z, r24
  d6:	87 e6       	ldi	r24, 0x67	; 103
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
  de:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
  e2:	08 95       	ret

000000e4 <writeUART>:
  e4:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  e8:	95 ff       	sbrs	r25, 5
  ea:	fc cf       	rjmp	.-8      	; 0xe4 <writeUART>
  ec:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
  f0:	08 95       	ret

000000f2 <writeTextUART>:
  f2:	ac 01       	movw	r20, r24
  f4:	20 e0       	ldi	r18, 0x00	; 0
  f6:	07 c0       	rjmp	.+14     	; 0x106 <writeTextUART+0x14>
  f8:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  fc:	95 ff       	sbrs	r25, 5
  fe:	fc cf       	rjmp	.-8      	; 0xf8 <writeTextUART+0x6>
 100:	30 93 c6 00 	sts	0x00C6, r19	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 104:	2f 5f       	subi	r18, 0xFF	; 255
 106:	fa 01       	movw	r30, r20
 108:	e2 0f       	add	r30, r18
 10a:	f1 1d       	adc	r31, r1
 10c:	30 81       	ld	r19, Z
 10e:	31 11       	cpse	r19, r1
 110:	f3 cf       	rjmp	.-26     	; 0xf8 <writeTextUART+0x6>
 112:	08 95       	ret

00000114 <readUART>:
 114:	82 33       	cpi	r24, 0x32	; 50
 116:	b1 f0       	breq	.+44     	; 0x144 <readUART+0x30>
 118:	28 f4       	brcc	.+10     	; 0x124 <readUART+0x10>
 11a:	80 33       	cpi	r24, 0x30	; 48
 11c:	49 f0       	breq	.+18     	; 0x130 <readUART+0x1c>
 11e:	81 33       	cpi	r24, 0x31	; 49
 120:	61 f0       	breq	.+24     	; 0x13a <readUART+0x26>
 122:	24 c0       	rjmp	.+72     	; 0x16c <readUART+0x58>
 124:	84 33       	cpi	r24, 0x34	; 52
 126:	c1 f0       	breq	.+48     	; 0x158 <readUART+0x44>
 128:	90 f0       	brcs	.+36     	; 0x14e <readUART+0x3a>
 12a:	85 33       	cpi	r24, 0x35	; 53
 12c:	d1 f0       	breq	.+52     	; 0x162 <readUART+0x4e>
 12e:	1e c0       	rjmp	.+60     	; 0x16c <readUART+0x58>
 130:	15 b8       	out	0x05, r1	; 5
 132:	85 b1       	in	r24, 0x05	; 5
 134:	81 60       	ori	r24, 0x01	; 1
 136:	85 b9       	out	0x05, r24	; 5
 138:	08 95       	ret
 13a:	15 b8       	out	0x05, r1	; 5
 13c:	85 b1       	in	r24, 0x05	; 5
 13e:	82 60       	ori	r24, 0x02	; 2
 140:	85 b9       	out	0x05, r24	; 5
 142:	08 95       	ret
 144:	15 b8       	out	0x05, r1	; 5
 146:	85 b1       	in	r24, 0x05	; 5
 148:	84 60       	ori	r24, 0x04	; 4
 14a:	85 b9       	out	0x05, r24	; 5
 14c:	08 95       	ret
 14e:	15 b8       	out	0x05, r1	; 5
 150:	85 b1       	in	r24, 0x05	; 5
 152:	88 60       	ori	r24, 0x08	; 8
 154:	85 b9       	out	0x05, r24	; 5
 156:	08 95       	ret
 158:	15 b8       	out	0x05, r1	; 5
 15a:	85 b1       	in	r24, 0x05	; 5
 15c:	80 61       	ori	r24, 0x10	; 16
 15e:	85 b9       	out	0x05, r24	; 5
 160:	08 95       	ret
 162:	15 b8       	out	0x05, r1	; 5
 164:	85 b1       	in	r24, 0x05	; 5
 166:	80 62       	ori	r24, 0x20	; 32
 168:	85 b9       	out	0x05, r24	; 5
 16a:	08 95       	ret
 16c:	8f ef       	ldi	r24, 0xFF	; 255
 16e:	85 b9       	out	0x05, r24	; 5
 170:	2f ef       	ldi	r18, 0xFF	; 255
 172:	81 ee       	ldi	r24, 0xE1	; 225
 174:	94 e0       	ldi	r25, 0x04	; 4
 176:	21 50       	subi	r18, 0x01	; 1
 178:	80 40       	sbci	r24, 0x00	; 0
 17a:	90 40       	sbci	r25, 0x00	; 0
 17c:	e1 f7       	brne	.-8      	; 0x176 <readUART+0x62>
 17e:	00 c0       	rjmp	.+0      	; 0x180 <readUART+0x6c>
 180:	00 00       	nop
 182:	15 b8       	out	0x05, r1	; 5
 184:	2f ef       	ldi	r18, 0xFF	; 255
 186:	81 ee       	ldi	r24, 0xE1	; 225
 188:	94 e0       	ldi	r25, 0x04	; 4
 18a:	21 50       	subi	r18, 0x01	; 1
 18c:	80 40       	sbci	r24, 0x00	; 0
 18e:	90 40       	sbci	r25, 0x00	; 0
 190:	e1 f7       	brne	.-8      	; 0x18a <readUART+0x76>
 192:	00 c0       	rjmp	.+0      	; 0x194 <readUART+0x80>
 194:	00 00       	nop
 196:	08 95       	ret

00000198 <main>:
 198:	0e 94 53 00 	call	0xa6	; 0xa6 <initUART9600>
 19c:	80 e0       	ldi	r24, 0x00	; 0
 19e:	91 e0       	ldi	r25, 0x01	; 1
 1a0:	0e 94 79 00 	call	0xf2	; 0xf2 <writeTextUART>
 1a4:	8a e0       	ldi	r24, 0x0A	; 10
 1a6:	0e 94 72 00 	call	0xe4	; 0xe4 <writeUART>
 1aa:	8d e0       	ldi	r24, 0x0D	; 13
 1ac:	0e 94 72 00 	call	0xe4	; 0xe4 <writeUART>
 1b0:	78 94       	sei
 1b2:	ea e7       	ldi	r30, 0x7A	; 122
 1b4:	f0 e0       	ldi	r31, 0x00	; 0
 1b6:	80 81       	ld	r24, Z
 1b8:	80 64       	ori	r24, 0x40	; 64
 1ba:	80 83       	st	Z, r24
 1bc:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <bufferTX>
 1c0:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <bufferTX+0x1>
 1c4:	89 2b       	or	r24, r25
 1c6:	a9 f3       	breq	.-22     	; 0x1b2 <main+0x1a>
 1c8:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <bufferTX>
 1cc:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <bufferTX+0x1>
 1d0:	0e 94 8a 00 	call	0x114	; 0x114 <readUART>
 1d4:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <bufferTX+0x1>
 1d8:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <bufferTX>
 1dc:	ea cf       	rjmp	.-44     	; 0x1b2 <main+0x1a>

000001de <__vector_21>:
	
}

ISR(ADC_vect){
 1de:	1f 92       	push	r1
 1e0:	0f 92       	push	r0
 1e2:	0f b6       	in	r0, 0x3f	; 63
 1e4:	0f 92       	push	r0
 1e6:	11 24       	eor	r1, r1
 1e8:	8f 93       	push	r24
 1ea:	9f 93       	push	r25
 1ec:	ef 93       	push	r30
 1ee:	ff 93       	push	r31
	//SE ALMACENA EL VALOR DE ADC Y SE BORRA EL VALOR DE LA BANDERA
	uint16_t adc_val16 = ADC;
 1f0:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 1f4:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
	uint8_t adcValue = (adc_val16 >> 8);

	ADCSRA |= (1<<ADIF);
 1f8:	ea e7       	ldi	r30, 0x7A	; 122
 1fa:	f0 e0       	ldi	r31, 0x00	; 0
 1fc:	80 81       	ld	r24, Z
 1fe:	80 61       	ori	r24, 0x10	; 16
 200:	80 83       	st	Z, r24
	
	//SE SEPARA EL VALOR DEL ADC EN 4 BITS CADA UNO
	adcValueHigh = adcValue >> 4;
 202:	89 2f       	mov	r24, r25
 204:	82 95       	swap	r24
 206:	8f 70       	andi	r24, 0x0F	; 15
 208:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <adcValueHigh>
	adcValueLow = adcValue & 0x0F;
 20c:	89 2f       	mov	r24, r25
 20e:	8f 70       	andi	r24, 0x0F	; 15
 210:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <__data_end>
	ADCSRA |= (1<<ADSC);
 214:	80 81       	ld	r24, Z
 216:	80 64       	ori	r24, 0x40	; 64
 218:	80 83       	st	Z, r24
}
 21a:	ff 91       	pop	r31
 21c:	ef 91       	pop	r30
 21e:	9f 91       	pop	r25
 220:	8f 91       	pop	r24
 222:	0f 90       	pop	r0
 224:	0f be       	out	0x3f, r0	; 63
 226:	0f 90       	pop	r0
 228:	1f 90       	pop	r1
 22a:	18 95       	reti

0000022c <__vector_18>:


ISR(USART_RX_vect){
 22c:	1f 92       	push	r1
 22e:	0f 92       	push	r0
 230:	0f b6       	in	r0, 0x3f	; 63
 232:	0f 92       	push	r0
 234:	11 24       	eor	r1, r1
 236:	8f 93       	push	r24
 238:	9f 93       	push	r25
	
	bufferTX = UDR0;
 23a:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <bufferTX+0x1>
 244:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <bufferTX>
	while(!(UCSR0A & (1<<UDRE0)));
 248:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 24c:	85 ff       	sbrs	r24, 5
 24e:	fc cf       	rjmp	.-8      	; 0x248 <__vector_18+0x1c>
	UDR0 = bufferTX;
 250:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <bufferTX>
 254:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <bufferTX+0x1>
 258:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 25c:	9f 91       	pop	r25
 25e:	8f 91       	pop	r24
 260:	0f 90       	pop	r0
 262:	0f be       	out	0x3f, r0	; 63
 264:	0f 90       	pop	r0
 266:	1f 90       	pop	r1
 268:	18 95       	reti

0000026a <_exit>:
 26a:	f8 94       	cli

0000026c <__stop_program>:
 26c:	ff cf       	rjmp	.-2      	; 0x26c <__stop_program>
